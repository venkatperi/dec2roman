const assert = require( 'assert' );
const { dec2Roman, roman2Dec } = require( '../index' )

const values = {
  '1': 'I', '2': 'II', '3': 'III', '4': 'IV', '5': 'V', '6': 'VI',
  '7': 'VII', '8': 'VIII', '9': 'IX', '10': 'X', '11': 'XI',
  '12': 'XII', '20': 'XX', '30': 'XXX', '40': 'XL', '50': 'L',
  '60': 'LX', '70': 'LXX', '80': 'LXXX', '90': 'XC', '100': 'C',
  '110': 'CX', '120': 'CXX', '200': 'CC', '300': 'CCC', '400': 'CD',
  '500': 'D', '600': 'DC', '700': 'DCC', '800': 'DCCC', '900': 'CM',
  '1000': 'M', '1100': 'MC', '1200': 'MCC', '2000': 'MM',
  '3000': 'MMM', '4000': 'I̅V̅', '5000': 'V̅', '6000': 'V̅I̅',
  '7000': 'V̅I̅I̅', '8000': 'V̅I̅I̅I̅', '9000': 'I̅X̅', '10000': 'X̅',
  '11000': 'X̅I̅', '12000': 'X̅I̅I̅', '20000': 'X̅X̅', '30000': 'X̅X̅X̅',
  '40000': 'X̅L̅', '50000': 'L̅', '60000': 'L̅X̅', '70000': 'L̅X̅X̅',
  '80000': 'L̅X̅X̅X̅', '90000': 'X̅C̅', '100000': 'C̅', '110000': 'C̅X̅',
  '120000': 'C̅X̅X̅', '200000': 'C̅C̅', '300000': 'C̅C̅C̅', '400000': 'C̅D̅',
  '500000': 'D̅', '600000': 'D̅C̅', '700000': 'D̅C̅C̅', '800000': 'D̅C̅C̅C̅',
  '900000': 'C̅M̅', '1000000': 'M̅', '1100000': 'M̅C̅', '1200000': 'M̅C̅C̅',
  '2000000': 'M̅M̅', '3000000': 'M̅M̅M̅',
}


describe( 'extended decimal to roman (with ibar)', () => {
  for ( let d in values ) {
    const r = values[d]
    it( `${d} -> ${r}`, () => assert.equal( dec2Roman( Number( d ) ), r ) )
    it( `${r} -> ${d}`, () => assert.equal( roman2Dec( r ), d ) )
  }
} )
